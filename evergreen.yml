buildvariants:
  - display_name: Ubuntu 18.04
    name: ubuntu1804
    run_on:
      - ubuntu1804-small
    tasks:
      - name: unit_tests_3.9
      - name: unit_tests_3.10
      - name: unit_tests_3.11
      - name: build_docs

  - display_name: Windows
    name: windows
    run_on:
      - windows-64-vsMulti-small
    tasks:
      - name: unit_tests_3.9
      - name: unit_tests_3.10
      - name: unit_tests_3.11

  - display_name: macOS Mojave
    name: macos-1014
    run_on:
      - macos-1014
    tasks:
      - name: unit_tests_3.9
      - name: unit_tests_3.10
      - name: unit_tests_3.11

functions:
  install_poetry:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

          export PIPX_HOME="$PWD/pipx"
          export PIPX_BIN_DIR="$PWD/pipx/bin"

          if [ "Windows_NT" = "$OS" ]; then
            export PIPX_HOME=$(cygpath -w "$PIPX_HOME")
            export PIPX_BIN_DIR=$(cygpath -w "$PIPX_BIN_DIR")

            PYTHON="/cygdrive/c/python/python${short_python_version}/python.exe"
            "$PYTHON" -m venv venv
            dos2unix "venv/Scripts/activate"
            . "venv/Scripts/activate"

          else
            export PYENV_ROOT="$PWD/pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"

            git clone https://github.com/pyenv/pyenv.git pyenv
            eval "$(pyenv init -)"
            eval "$(pyenv init --path)"
            git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv

            SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk MACOSX_DEPLOYMENT_TARGET=10.14 pyenv install ${python_version}
            pyenv virtualenv ${python_version} venv-${python_version}
            pyenv global venv-${python_version}

            pip install --upgrade pip
          fi

          export PATH="$PATH:$PIPX_BIN_DIR"
          rm -rf "$PIPX_HOME"

          pip install --disable-pip-version-check --quiet pipx==1.1.0
          pipx install poetry==1.3.2 --force

  run_tests:
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8

          export PIPX_BIN_DIR="$PWD/pipx/bin"
          if [ "Windows_NT" = "$OS" ]; then
            export PIPX_BIN_DIR=$(cygpath -w "$PIPX_BIN_DIR")
          fi
          export PATH="$PATH:$PIPX_BIN_DIR"

          poetry install
          poetry run pytest --cov=src --junitxml=junit-test-output.xml

  build_docs:
    - command: shell.exec
      params:
        working_dir: src/goodbase-docs
        script: |
          set -o errexit
          set -o verbose
          wget -q https://github.com/gohugoio/hugo/releases/download/v0.92.1/hugo_0.92.1_Linux-64bit.tar.gz
          tar xf hugo_0.92.1_Linux-64bit.tar.gz
          ./hugo

pre:
- command: git.get_project
  params:
    directory: src

post:
- command: attach.xunit_results
  params:
    file: src/junit-*.xml

tasks:
- name: unit_tests_3.9
  commands:
    - func: install_poetry
      vars:
        python_version: 3.9.2
        short_python_version: 39
    - func: run_tests

- name: unit_tests_3.10
  commands:
    - func: install_poetry
      vars:
        python_version: 3.10.11
        short_python_version: 310
    - func: run_tests

- name: unit_tests_3.11
  commands:
    - func: install_poetry
      vars:
        python_version: 3.11.7
        short_python_version: 311
    - func: run_tests

- name: build_docs
  commands:
  - func: build_docs
